import Plexus;
import java.awt.Dimension;


public class DFMapBuilder {
	Plexus m_plexus
	def static cubesize = 32  // the size in sauer to make each square from the DF map
	def map = [' -1':'e','  0': '?','  1':'?','  2':'f','  3':'?','  4':'?','  5':'?','  6':'?','  7':'?','  8':'?','  9':'?', ' 10':'?', ' 11':'?', ' 12':'?', ' 13':'?', ' 14':'?', ' 15':'?', ' 16':'?', ' 17':'?', ' 18':'?', ' 19':'?', ' 20':'?', ' 21':'?', ' 22':'f', ' 23':'?', ' 24':'f', ' 25':'?', ' 26':'?', ' 27':'?', ' 28':'?', ' 29':'?', ' 30':'?', ' 31':'?',' 32':'e', ' 33':'?', ' 34':'f', ' 35':'?', ' 36':'?', ' 37':'?', ' 38':'?', ' 39':'?', ' 40':'?', ' 41':'?', ' 42':'?', ' 43':'?', ' 44':'?', ' 45':'?', ' 46':'?', ' 47':'?', ' 48':'?', ' 49':'?', ' 50':'?', ' 51':'?', ' 52':'?', ' 53':'?', ' 54':'?', ' 55':'?', ' 56':'?', ' 57':'?', ' 58':'s', ' 59':'?', ' 60':'?', ' 61':'?', ' 62':'?', ' 63':'?', ' 64':'?', ' 65':'?', ' 66':'?', ' 67':'?', ' 68':'?', ' 69':'?', ' 70':'?', ' 71':'?', ' 72':'?', ' 73':'?', ' 74':'?', ' 75':'?', ' 76':'?', ' 77':'?', ' 78':'?', ' 79':'?', ' 80':'?', ' 81':'?', ' 82':'?', ' 83':'?', ' 84':'?', ' 85':'?', ' 86':'?', ' 87':'?', ' 88':'?', ' 89':'?', ' 90':'?', ' 91':'?', ' 92':'?', ' 93':'?', ' 94':'?', ' 95':'?', ' 96':'?', ' 97':'?', ' 98':'?', ' 99':'?', '100':'?', '100':'?', '101':'?', '102':'?', '103':'?', '104':'?', '105':'?', '106':'?', '107':'?', '108':'?', '109':'?', '110':'?', '111':'?', '112':'?', '113':'?', '114':'?', '115':'?', '116':'?', '117':'?', '118':'?', '119':'?', '120':'?', '121':'?', '122':'?', '123':'?', '124':'?', '125':'?', '126':'?', '127':'?', '128':'?', '129':'?', '130':'?', '131':'?', '132':'?', '133':'?', '134':'?', '135':'?', '136':'?', '137':'?', '138':'?', '139':'?', '140':'?', '141':'?', '142':'?', '143':'?', '144':'?', '145':'?', '146':'?', '147':'?', '148':'?', '149':'?', '150':'?', '151':'?', '152':'?', '153':'?', '154':'?', '155':'?', '156':'?', '157':'?', '158':'?', '159':'?', '160':'?', '161':'?', '162':'?', '163':'?', '164':'?', '165':'?', '166':'?', '167':'?', '168':'?', '169':'?', '170':'?', '171':'?', '172':'?', '173':'?', '174':'?', '175':'?', '176':'?', '177':'?', '178':'?', '179':'?', '180':'?', '181':'?', '182':'?', '183':'?', '184':'?', '185':'?', '186':'?', '187':'?', '188':'?', '189':'?', '190':'?', '191':'?', '192':'?', '193':'?', '194':'?', '195':'?', '196':'?', '197':'?', '198':'?', '199':'?', '200':'?', '201':'?', '202':'?', '203':'?', '204':'?', '205':'?', '206':'?', '207':'?', '208':'?', '209':'?', '210':'?', '211':'?', '212':'?', '213':'?', '214':'?', '215':'?', '216':'l', '217':'l', '218':'l', '219':'l', '220':'l', '221':'l', '222':'?', '223':'?', '224':'?', '225':'?', '226':'?', '227':'?', '228':'?', '229':'?', '230':'?', '231':'?', '232':'?', '233':'?', '234':'?', '235':'?', '236':'?', '237':'?', '238':'?', '239':'?', '240':'?', '241':'?', '242':'?', '243':'?', '244':'?', '245':'?', '246':'?', '247':'?', '248':'?', '249':'?', '250':'?', '251':'?', '252':'?', '253':'?', '254':'?', '255':'?', '256':'?', '257':'?', '258':'?', '259':'?', '260':'?', '261':'?', '262':'?', '263':'?', '264':'?', '265':'l', '266':'?', '267':'?', '268':'f', '269':'f', '270':'f', '271':'f', '272':'f', '273':'f', '274':'f', '275':'f', '276':'f', '277':'f', '278':'?', '279':'?', '280':'?', '281':'?', '282':'?', '283':'?', '284':'?', '285':'?', '286':'?', '287':'?', '288':'?', '289':'?', '290':'?', '291':'?', '292':'?', '293':'?', '294':'?', '295':'?', '296':'?', '297':'?', '298':'?', '299':'?', '300':'?', '301':'?', '302':'?', '303':'?', '304':'?', '305':'?', '306':'?', '307':'?', '308':'?', '309':'?', '310':'?', '311':'?', '312':'?', '313':'?', '314':'?', '315':'?', '316':'?', '317':'?', '318':'?', '319':'?', '320':'?', '321':'?', '322':'?', '323':'?', '324':'?', '325':'?', '326':'?', '327':'?', '328':'?', '329':'?', '330':'?', '331':'?', '332':'?', '333':'?', '334':'f', '335':'f', '336':'f', '337':'f', '338':'f', '339':'f', '340':'f', '341':'f', '342':'?', '343':'?', '344':'?', '345':'?', '346':'?', '347':'?', '348':'?', '349':'?', '350':'?', '351':'?', '352':'?', '353':'?', '354':'?', '355':'?', '356':'?', '357':'?', '358':'?', '359':'?', '360':'?', '361':'?', '362':'?', '363':'?', '364':'?', '365':'?', '366':'?', '367':'?', '368':'?', '369':'?', '370':'w', '371':'w', '372':'w', '373':'w', '374':'w', '375':'w', '376':'?', '377':'?', '378':'?', '379':'?', '380':'?', '381':'w', '382':'f', '383':'f', '384':'f', '385':'f', '386':'f', '387':'f', '388':'f', '389':'f', '390':'f', '391':'f', '392':'f', '393':'?', '394':'?', '395':'?', '396':'?', '397':'f', '398':'f', '399':'f', '400':'?', '401':'?', '402':'f', '403':'f', '404':'f', '405':'?', '406':'?', '407':'?', '408':'?', '409':'?', '410':'?', '411':'?', '412':'?', '413':'?', '414':'?', '415':'?', '416':'?', '417':'?', '418':'?', '419':'?', '420':'?', '421':'?', '422':'?', '423':'?', '424':'?', '425':'?', '426':'?', '427':'?', '428':'?', '429':'?', '430':'?', '431':'?', '432':'?', '433':'?', '434':'?', '435':'?', '436':'?', '437':'f', '438':'f', '439':'f', '440':'w', '441':'f', '442':'f', '443':'f', '444':'f', '445':'f', '446':'f', '447':'?', '448':'?', '449':'?', '450':'?', '451':'?', '452':'?', '453':'?', '454':'?', '455':'?', '456':'?', '457':'?', '458':'?', '459':'?', '460':'?', '461':'?', '462':'?', '463':'?', '464':'?', '465':'?', '466':'?', '467':'?', '468':'?', '469':'?', '470':'?', '471':'?', '472':'?', '473':'?', '474':'?', '475':'?', '476':'?', '477':'?', '478':'?', '479':'?', '480':'?', '481':'?', '482':'?', '483':'?', '484':'?', '485':'?', '486':'?', '487':'?', '488':'?', '489':'?', '490':'f', '491':'f', '492':'f', '493':'f', '494':'f', '495':'?', '496':'?', '497':'?', '498':'?', '499':'?', '500':'?', '501':'?', '502':'?', '503':'?', '504':'?', '505':'?', '506':'?', '507':'?', '508':'?', '509':'?', '510':'?', '511':'?', '512':'?', '513':'w', '514':'?', '515':'?', '516':'?', '517':'?', '518':'?', '519':'?', '520':'?', '521':'?', '522':'?', '523':'?', '524':'?', '525':'?', '526':'?', '527':'?', '528':'?', '529':'?', '530':'?', '531':'?', '532':'?', '533':'?', '534':'?', '535':'?', '536':'?', '537':'?', '538':'?', '539':'?', '540':'?', '541':'?', '542':'?', '543':'?', '544':'?', '545':'?', '546':'?', '547':'?', '548':'?', '549':'?', '550':'?', '551':'?', '552':'?', '553':'?', '554':'?', '555':'?', '556':'?', '557':'?', '558':'?', '559':'?', '560':'?', '561':'?', '562':'?', '563':'?', '564':'?', '565':'?', '566':'?', '567':'?', '568':'?', '569':'?', '570':'?', '571':'?', '572':'?', '573':'?', '574':'?', '575':'?', '576':'?', '577':'?', '578':'?', '579':'?', '580':'?', '581':'?', '582':'?', '583':'?', '584':'?', '585':'?', '586':'?', '587':'?', '588':'?', '589':'?', '590':'?', '591':'?', '592':'?', '593':'?', '594':'?', '595':'?', '596':'?', '597':'?', '598':'?', '599':'?']
	// call this function to build a new DF map from the file passed in
	def buildMap(plexus, filename) {
		m_plexus = plexus
		m_plexus.sauer('newmap', 'if (= 1 $editing) [ edittoggle ]; tc_allowedit 1; thirdperson 0; newmap 13; musicvol 0')
		loadFromFile(filename)

		m_plexus.sauer("spawn", "selcube 32 32 4088 1 1 1 32 5; ent.yaw p0 135; newent playerstart; tc_respawn p0")
		m_plexus.sauer('finished', 'remip; calclight 3; tc_allowedit 0; thirdperson 1')
		m_plexus.dumpCommands()
	}
	// read in and process a whole file
	def loadFromFile(filename) {
		def dfmap = new File(filename);
		def dfmaprow = dfmap.readLines();
		def info = dfmaprow.get(0).split(",")
		def layers = info[1].toInteger()
		def rows = ((dfmaprow.size - layers) / layers)
		def totalrows = dfmaprow.size();
		for (def i = 0; i < totalrows; ++i ){
			def dfmapcol = dfmaprow.get(i)
			def h = (i / rows).toInteger(); //sets height
			def ir = i - (h * rows) //resets row
			def dfmapcolarray = dfmapcol.split('  ')
			def rle = 0, cols = dfmapcolarray.length
			println "cols: $cols, line: $dfmapcol"
			for (def j = 0; j < cols; j += rle) {
				// get chunks of identical letters to process them all the same
				rle = getRLE(dfmapcolarray, j, cols)
				if (map[dfmapcolarray[j]] != '$') {
					//println "i got an rle of $rle at index: $j"
					def x = j * cubesize;
					def y = ir * cubesize;
					def z = 3056 + h * cubesize;
					if (map[dfmapcolarray[j]] == 'f' ){
					m_plexus.sauer('delcube', "selcube $x $y $z $rle 1 1 $cubesize 5; delcube")
					}else if (map[dfmapcolarray[j]] == 'w' ){
					m_plexus.sauer('delcube', "selcube $x $y $z $rle 1 1 $cubesize 5; delcube; editmat water")
					} else if(map[dfmapcolarray[j]] == 'e'){
					m_plexus.sauer('delcube', "selcube $x $y $z $rle 1 1 $cubesize 5; delcube")
				 	} else if(map[dfmapcolarray[j]] == 's'){
					m_plexus.sauer('delcube', "selcube $x $y $z $rle 1 1 $cubesize 5; delcube")}
					
					m_plexus.dumpCommands()}
				}
			}
		}
	
	// this scans across the array to return a count of homogenous letters following the current index
	// this allow processing them as chunks when talking to sauer,  cols is the length of the array
	def getRLE(dfmapcolarray, j, cols) {
		//def map = [  0: '?', 1:'?','  2':'f', 3:'?', 4:'?', 5:'?', 6:'?', 7:'?', 8:'?', 9:'?', 10:'?', 11:'?', 12:'?', 13:'?', 14:'?', 15:'?', 16:'?', 17:'?', 18:'?', 19:'?', 20:'?', 21:'?', 22:'f', 23:'?', 24:'e', 25:'?', 26:'?', 27:'?', 28:'?', 29:'?', 30:'?', 31:'?','  32':'e', 33:'?', 34:'f', 35:'?', 36:'?', 37:'?', 38:'?', 39:'?', 40:'?', 41:'?', 42:'?', 43:'?', 44:'?', 45:'?', 46:'?', 47:'?', 48:'?', 49:'?', 50:'?', 51:'?', 52:'?', 53:'?', 54:'?', 55:'?', 56:'?', 57:'?', 58:'?', 59:'?', 60:'?', 61:'?', 62:'?', 63:'?', 64:'?', 65:'?', 66:'?', 67:'?', 68:'?', 69:'?', 70:'?', 71:'?', 72:'?', 73:'?', 74:'?', 75:'?', 76:'?', 77:'?', 78:'?', 79:'?', 80:'?', 81:'?', 82:'?', 83:'?', 84:'?', 85:'?', 86:'?', 87:'?', 88:'?', 89:'?', 90:'?', 91:'?', 92:'?', 93:'?', 94:'?', 95:'?', 96:'?', 97:'?', 98:'?', 99:'?', 100:'?', 100:'?', 101:'?', 102:'?', 103:'?', 104:'?', 105:'?', 106:'?', 107:'?', 108:'?', 109:'?', 110:'?', 111:'?', 112:'?', 113:'?', 114:'?', 115:'?', 116:'?', 117:'?', 118:'?', 119:'?', 120:'?', 121:'?', 122:'?', 123:'?', 124:'?', 125:'?', 126:'?', 127:'?', 128:'?', 129:'?', 130:'?', 131:'?', 132:'?', 133:'?', 134:'?', 135:'?', 136:'?', 137:'?', 138:'?', 139:'?', 140:'?', 141:'?', 142:'?', 143:'?', 144:'?', 145:'?', 146:'?', 147:'?', 148:'?', 149:'?', 150:'?', 151:'?', 152:'?', 153:'?', 154:'?', 155:'?', 156:'?', 157:'?', 158:'?', 159:'?', 160:'?', 161:'?', 162:'?', 163:'?', 164:'?', 165:'?', 166:'?', 167:'?', 168:'?', 169:'?', 170:'?', 171:'?', 172:'?', 173:'?', 174:'?', 175:'?', 176:'?', 177:'?', 178:'?', 179:'?', 180:'?', 181:'?', 182:'?', 183:'?', 184:'?', 185:'?', 186:'?', 187:'?', 188:'?', 189:'?', 190:'?', 191:'?', 192:'?', 193:'?', 194:'?', 195:'?', 196:'?', 197:'?', 198:'?', 199:'?', 200:'?', 201:'?', 202:'?', 203:'?', 204:'?', 205:'?', 206:'?', 207:'?', 208:'?', 209:'?', 210:'?', 211:'?', 212:'?', 213:'?', 214:'?', 215:'?', 216:'w', 217:'w', 218:'w', 219:'w', 220:'w', 221:'w', 222:'?', 223:'?', 224:'?', 225:'?', 226:'?', 227:'?', 228:'?', 229:'?', 230:'?', 231:'?', 232:'?', 233:'?', 234:'?', 235:'?', 236:'?', 237:'?', 238:'?', 239:'?', 240:'?', 241:'?', 242:'?', 243:'?', 244:'?', 245:'?', 246:'?', 247:'?', 248:'?', 249:'?', 250:'?', 251:'?', 252:'?', 253:'?', 254:'?', 255:'?', 256:'?', 257:'?', 258:'?', 259:'?', 260:'?', 261:'?', 262:'?', 263:'?', 264:'?', 265:'r', 266:'?', 267:'?', 268:'w', 269:'w', 270:'w', 271:'w', 272:'w', 273:'w', 274:'w', 275:'w', 276:'w', 277:'w', 278:'?', 279:'?', 280:'?', 281:'?', 282:'?', 283:'?', 284:'?', 285:'?', 286:'?', 287:'?', 288:'?', 289:'?', 290:'?', 291:'?', 292:'?', 293:'?', 294:'?', 295:'?', 296:'?', 297:'?', 298:'?', 299:'?', 300:'?', 301:'?', 302:'?', 303:'?', 304:'?', 305:'?', 306:'?', 307:'?', 308:'?', 309:'?', 310:'?', 311:'?', 312:'?', 313:'?', 314:'?', 315:'?', 316:'?', 317:'?', 318:'?', 319:'?', 320:'?', 321:'?', 322:'?', 323:'?', 324:'?', 325:'?', 326:'?', 327:'?', 328:'?', 329:'?', 330:'?', 331:'?', 332:'?', 333:'?', 334:'f', 335:'f', 336:'f', 337:'f', 338:'f', 339:'f', 340:'f', 341:'f', 342:'?', 343:'?', 344:'?', 345:'?', 346:'?', 347:'?', 348:'?', 349:'?', 350:'?', 351:'?', 352:'?', 353:'?', 354:'?', 355:'?', 356:'?', 357:'?', 358:'?', 359:'?', 360:'?', 361:'?', 362:'?', 363:'?', 364:'?', 365:'?', 366:'?', 367:'?', 368:'?', 369:'?', 370:'?', 371:'?', 372:'?', 373:'?', 374:'?', 375:'?', 376:'?', 377:'?', 378:'?', 379:'?', 380:'?', 381:'?', 382:'?', 383:'?', 384:'?', 385:'?', 386:'?', 387:'?', 388:'?', 389:'?', 390:'?', 391:'?', 392:'?', 393:'?', 394:'?', 395:'?', 396:'?', 397:'f', 398:'f', 399:'f', 400:'?', 401:'?', 402:'f', 403:'f', 404:'f', 405:'?', 406:'?', 407:'?', 408:'?', 409:'?', 410:'?', 411:'?', 412:'?', 413:'?', 414:'?', 415:'?', 416:'?', 417:'?', 418:'?', 419:'?', 420:'?', 421:'?', 422:'?', 423:'?', 424:'?', 425:'?', 426:'?', 427:'?', 428:'?', 429:'?', 430:'?', 431:'?', 432:'?', 433:'?', 434:'?', 435:'?', 436:'?', 437:'w', 438:'w', 439:'w', 440:'w', 441:'w', 442:'w', 443:'w', 444:'f', 445:'f', 446:'f', 447:'?', 448:'?', 449:'?', 450:'?', 451:'?', 452:'?', 453:'?', 454:'?', 455:'?', 456:'?', 457:'?', 458:'?', 459:'?', 460:'?', 461:'?', 462:'?', 463:'?', 464:'?', 465:'?', 466:'?', 467:'?', 468:'?', 469:'?', 470:'?', 471:'?', 472:'?', 473:'?', 474:'?', 475:'?', 476:'?', 477:'?', 478:'?', 479:'?', 480:'?', 481:'?', 482:'?', 483:'?', 484:'?', 485:'?', 486:'?', 487:'?', 488:'?', 489:'?', 490:'?', 491:'?', 492:'?', 493:'?', 494:'?', 495:'?', 496:'?', 497:'?', 498:'?', 499:'?', 500:'?', 501:'?', 502:'?', 503:'?', 504:'?', 505:'?', 506:'?', 507:'?', 508:'?', 509:'?', 510:'?', 511:'?', 512:'?', 513:'w', 514:'?', 515:'?', 516:'?', 517:'?', 518:'?', 519:'?', 520:'?', 521:'?', 522:'?', 523:'?', 524:'?', 525:'?', 526:'?', 527:'?', 528:'?', 529:'?', 530:'?', 531:'?', 532:'?', 533:'?', 534:'?', 535:'?', 536:'?', 537:'?', 538:'?', 539:'?', 540:'?', 541:'?', 542:'?', 543:'?', 544:'?', 545:'?', 546:'?', 547:'?', 548:'?', 549:'?', 550:'?', 551:'?', 552:'?', 553:'?', 554:'?', 555:'?', 556:'?', 557:'?', 558:'?', 559:'?', 560:'?', 561:'?', 562:'?', 563:'?', 564:'?', 565:'?', 566:'?', 567:'?', 568:'?', 569:'?', 570:'?', 571:'?', 572:'?', 573:'?', 574:'?', 575:'?', 576:'?', 577:'?', 578:'?', 579:'?', 580:'?', 581:'?', 582:'?', 583:'?', 584:'?', 585:'?', 586:'?', 587:'?', 588:'?', 589:'?', 590:'?', 591:'?', 592:'?', 593:'?', 594:'?', 595:'?', 596:'?', 597:'?', 598:'?', 599:'?']
		def start = j
		def dfblocktype = map[dfmapcolarray[j]]
		for (++j; j < cols; ++j) {
			// could potentially group letters here if they have the same meaning for performance
			// but for now every letter is considered something different
			if (dfblocktype != map[dfmapcolarray[j]]) break
		}
		return j - start
	}
}