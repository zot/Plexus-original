import java.awt.GridBagLayoutimport java.awt.GridBagConstraintsimport java.awt.GridBagConstraintsimport javax.swing.BoxLayoutimport java.awt.BorderLayoutimport static java.awt.BorderLayout.*import static java.awt.GridBagConstraints.*import java.awt.*import javax.swing.*import javax.swing.border.*import groovy.swing.SwingBuilderif (args.length != 1) {	println "Usage: Test port"	System.exit(1);}output = nullpendingCommands = [:]count = 0commands = [	periodic: {args ->		println "PERIODIC COMMAND"		addCmd('periodic', "sleep 1000 [remotesend periodic]")	}]def addCmd(key, value) {	synchronized (pendingCommands) {		pendingCommands[key] = value	}}def runCommand(str) {	def args = str.split()	def func = commands[args[0]]	if (func) {		func(args.length > 1 ? args[1..-1] : [])	}}def start() {	sock = new ServerSocket(Integer.parseInt(args[0]))	println "READY"	while (true) {		Socket client = sock.accept({			println("Got connection...")			output = it.getOutputStream()			it.getInputStream().eachLine {//				println "RECEIVED: $it"				runCommand(it)				dumpCommands()			}			try {it.shutdownInput()} catch (Exception ex) {}			try {it.shutdownOutput()} catch (Exception ex) {}			println "Disconnect"		});	}}def dumpCommands() {	if (output) {		synchronized (pendingCommands) {			output << pendingCommands.collect{it.value}.join(";") + '\n'			println "SENT: ${pendingCommands.collect{it.value}.join(';') + '\n'}"			pendingCommands = [:]		}		output.flush()	}}def send(label, field) {	if (field.text && field.text[0]) {		def cmd = "ent.$label p0 ${field.text}"		println "NEW $label: $cmd"		addCmd(label, cmd)		dumpCommands()	}}def newX() {	send('x', xField)}def newY() {	send('y', yField)}def newZ() {	send('z', zField)}def cmd() {	if (cmdField.text && cmdField.text[0]) {		addCmd('cmd', cmdField.text)		cmdField.text = ""		dumpCommands()	}}SwingBuilder.build {	f = frame(title: 'Position', size: [500, 300], show: true, pack: true, windowClosing: {System.exit(0)}) {	gridBagLayout()	label(text: "x", constraints:gbc(gridx: 0, gridy: 0, fill:BOTH, insets:[2,2,2,2]))	xField = textField(columns: 10, actionPerformed: {newX()}, focusLost: {newX()}, constraints:gbc(gridx: 1, gridy: 0, gridwidth: 1, fill:HORIZONTAL, weightx: 0, insets:[2,2,2,2]))	label(text: "y", constraints:gbc(gridx: 0, gridy: 1, fill:BOTH, insets:[2,2,2,2]))	yField = textField(columns: 10, actionPerformed: {newY()}, focusLost: {newY()}, constraints:gbc(gridx: 1, gridy: 1, gridwidth: 1, fill:HORIZONTAL, weightx: 0, insets:[2,2,2,2]))	label(text: "z", constraints:gbc(gridx: 0, gridy: 2, fill:BOTH, insets:[2,2,2,2]))	zField = textField(columns: 10, actionPerformed: {newZ()}, focusLost: {newZ()}, constraints:gbc(gridx: 1, gridy: 2, gridwidth: 1, fill:HORIZONTAL, weightx: 0, insets:[2,2,2,2]))	label(text: "Command", constraints:gbc(gridx: 0, gridy: 3, fill:BOTH, insets:[2,2,2,2]))	cmdField = textField(columns: 80, actionPerformed: {cmd()}, focusLost: {cmd()}, constraints:gbc(gridx: 1, gridy: 3, gridwidth: 2, fill:HORIZONTAL, weightx: 1, insets:[2,2,2,2]))}}commands.position = {args ->	xField.text = args[0]	yField.text = args[1]	zField.text = args[2]}start()